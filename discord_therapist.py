"""A simple Discord bot that reverses messages."""
import asyncio
import contextlib
import os
import re
import traceback
from typing import AsyncGenerator, Any

import discord
from discord import Message
from dotenv import load_dotenv

from mergebots import BotMerger
from mergebots.models import MergedMessage, MergedBotMessage, MergedBot, MergedUserMessage, MergedUser

load_dotenv()

DISCORD_BOT_SECRET = os.environ["DISCORD_BOT_SECRET"]

bot_merger = BotMerger()
discord_client = discord.Client(intents=discord.Intents.default())

_NULL_CONTEXT = contextlib.nullcontext()


@discord_client.event
async def on_ready() -> None:
    """Called when the client is done preparing the data received from Discord."""
    print("Logged in as", discord_client.user)


@discord_client.event
async def on_message(message: Message) -> None:
    """Called when a message is sent to a channel (both a user message and a bot message)."""
    # TODO make this part of the library
    if message.author == discord_client.user:
        # make sure we are not embarking on an "infinite loop" journey
        return

    try:
        merged_user = MergedUser(name=message.author.name)  # TODO is it worth caching these objects ?
        user_message = MergedUserMessage(sender=merged_user, content=message.content)
        async for response in fulfill_message_with_typing(user_message, message.channel.typing()):
            await message.channel.send(response.content)
    except Exception:
        await message.channel.send(f"```\n{traceback.format_exc()}\n```")
        raise


def escape_markdown(text):
    """Helper function to escape Discord markdown characters."""
    # TODO this was generated by GPT-4... replace with a more nuanced / thought through approach ?
    escape_chars = r"\*_`~"
    return re.sub(rf"([{re.escape(escape_chars)}])", r"\\\1", text)


@bot_merger.register_bot("dummy_bot", "Dummy Bot", "A bot that reverses messages and repeats them three times.")
async def dummy_bot_fulfiller(bot: MergedBot, message: MergedMessage) -> AsyncGenerator[MergedMessage, None]:
    """A dummy bot that reverses messages and repeats them three times."""
    for num in ("one", "two", "three"):
        await asyncio.sleep(1)
        yield MergedBotMessage(
            sender=bot,
            content=f"{message.content[::-1]} {num}",
            keep_typing=num != "three",
        )


async def fulfill_message_with_typing(
    message: MergedMessage,
    typing_context_manager: Any,
) -> AsyncGenerator[MergedMessage, None]:
    """
    Fulfill a message. Returns a generator that would yield zero or more responses to the message.
    typing_context_manager is a context manager that would be used to indicate that the bot is typing.
    """
    # TODO make this function a part of the MergeBots lib ?
    response_generator = bot_merger.fulfill_message(message, "dummy_bot")
    response = None
    while True:
        try:
            if response and response.keep_typing:
                _typing_context_manager = typing_context_manager
            else:
                _typing_context_manager = _NULL_CONTEXT

            async with _typing_context_manager:
                response = await anext(response_generator)

        except StopAsyncIteration:
            return

        yield response


if __name__ == "__main__":
    discord_client.run(DISCORD_BOT_SECRET)
